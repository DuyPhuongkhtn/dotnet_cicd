name: Manual Branch Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  GATEWAY_IMAGE_NAME: ${{ format('{0}/{1}/gateway-api', 'ghcr.io', github.repository_owner) }}
  EMAIL_IMAGE_NAME: ${{ format('{0}/{1}/email-service', 'ghcr.io', github.repository_owner) }}
  AUTH_IMAGE_NAME: ${{ format('{0}/{1}/auth-service', 'ghcr.io', github.repository_owner) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Set up Docker image names
        run: |
          echo "GATEWAY_IMAGE_NAME_LOWER=$(echo ${{ env.REGISTRY }}/${{ github.repository }}/gateway-api | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "EMAIL_IMAGE_NAME_LOWER=$(echo ${{ env.REGISTRY }}/${{ github.repository }}/email-service | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "AUTH_IMAGE_NAME_LOWER=$(echo ${{ env.REGISTRY }}/${{ github.repository }}/auth-service | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          # Build and push Gateway API
          docker build -t ${{ env.GATEWAY_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }} ./GatewayAPI
          docker push ${{ env.GATEWAY_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}

          # Build and push Email Service
          docker build -t ${{ env.EMAIL_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }} ./EmailService
          docker push ${{ env.EMAIL_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}

          # Build and push Auth Service
          docker build -t ${{ env.AUTH_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }} ./AuthenticationService
          docker push ${{ env.AUTH_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          password: ${{ secrets.DIGITALOCEAN_PASSWORD }}
          script: |
            # Create deployment directory
            mkdir -p /deployments/${{ github.ref_name }}
            cd /deployments/${{ github.ref_name }}

            # Check if network exists, if not create it
            NETWORK_EXISTS=$(docker network ls --format "{{.Name}}" | grep -w "microservices-network" || true)
            if [ -z "$NETWORK_EXISTS" ]; then
              echo "Creating microservices-network..."
              docker network create microservices-network
            else
              echo "Network microservices-network already exists"
            fi

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull images for this branch
            docker pull ${{ env.GATEWAY_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}
            docker pull ${{ env.EMAIL_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}
            docker pull ${{ env.AUTH_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}

            # Create docker-compose.yml for branch deployment
            cat > docker-compose.yml << 'EOL'
            version: '3.8'

            services:
              sqlserver:
                image: mcr.microsoft.com/mssql/server:2022-latest
                container_name: sqlserver-${{ github.ref_name }}
                environment:
                  - ACCEPT_EULA=Y
                  - SA_PASSWORD=YourStrong@Passw0rd
                  - MSSQL_PID=Express
                ports:
                  - "${{ inputs.environment == 'production' && '1433' || '1434' }}:1433"
                networks:
                  - microservices-network
                volumes:
                  - sqlserver_${{ github.ref_name }}_data:/var/opt/mssql
                restart: unless-stopped

              kafka:
                image: confluentinc/cp-kafka:latest
                container_name: kafka-${{ github.ref_name }}
                environment:
                  KAFKA_NODE_ID: 1
                  KAFKA_PROCESS_ROLES: broker,controller
                  KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-${{ github.ref_name }}:29093
                  KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
                  KAFKA_LISTENERS: PLAINTEXT://kafka-${{ github.ref_name }}:9092,CONTROLLER://kafka-${{ github.ref_name }}:29093
                  KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-${{ github.ref_name }}:9092
                  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
                  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
                  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
                  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
                  KAFKA_NUM_PARTITIONS: 3
                ports:
                  - "${{ inputs.environment == 'production' && '9092' || '9093' }}:9092"
                networks:
                  - microservices-network
                restart: unless-stopped

              kafka-init:
                image: confluentinc/cp-kafka:latest
                container_name: kafka-init-${{ github.ref_name }}
                depends_on:
                  - kafka
                networks:
                  - microservices-network
                entrypoint: ["/bin/sh", "-c"]
                command: |
                  "
                  echo 'Waiting for Kafka to be ready...'
                  sleep 30
                  kafka-topics --create --topic user-registered --bootstrap-server kafka-${{ github.ref_name }}:9092 --replication-factor 1 --partitions 1 --if-not-exists
                  echo 'Topic user-registered created successfully'
                  "

              auth-service:
                image: ${{ env.AUTH_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}
                container_name: auth-service-${{ github.ref_name }}
                environment:
                  - ASPNETCORE_ENVIRONMENT=${{ inputs.environment }}
                  - ConnectionStrings__DefaultConnection=Server=sqlserver-${{ github.ref_name }},1433;Database=AuthDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true
                  - Kafka__BootstrapServers=kafka-${{ github.ref_name }}:9092
                ports:
                  - "${{ inputs.environment == 'production' && '5001' || '6001' }}:80"
                depends_on:
                  - sqlserver
                  - kafka
                networks:
                  - microservices-network
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:80/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              email-service:
                image: ${{ env.EMAIL_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}
                container_name: email-service-${{ github.ref_name }}
                environment:
                  - ASPNETCORE_ENVIRONMENT=${{ inputs.environment }}
                  - Kafka__BootstrapServers=kafka-${{ github.ref_name }}:9092
                ports:
                  - "${{ inputs.environment == 'production' && '5002' || '6002' }}:80"
                depends_on:
                  - kafka
                networks:
                  - microservices-network
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:80/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

              gateway-api:
                image: ${{ env.GATEWAY_IMAGE_NAME_LOWER }}:${{ github.sha }}-${{ github.ref_name }}
                container_name: gateway-api-${{ github.ref_name }}
                environment:
                  - ASPNETCORE_ENVIRONMENT=${{ inputs.environment }}
                  - Services__AuthService=http://auth-service-${{ github.ref_name }}:80
                  - Services__EmailService=http://email-service-${{ github.ref_name }}:80
                ports:
                  - "${{ inputs.environment == 'production' && '5000' || '6000' }}:80"
                depends_on:
                  - auth-service
                  - email-service
                networks:
                  - microservices-network
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:80/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3

            networks:
              microservices-network:
                external: true

            volumes:
              sqlserver_${{ github.ref_name }}_data:
            EOL

            # Stop existing containers for this branch
            docker-compose down --remove-orphans

            # Start all services
            docker-compose up -d

            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 60

            # Check container status
            echo "=== Container Status ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep ${{ github.ref_name }}

            # Check health status
            GATEWAY_PORT=${{ inputs.environment == 'production' && '5000' || '6000' }}
            AUTH_PORT=${{ inputs.environment == 'production' && '5001' || '6001' }}
            EMAIL_PORT=${{ inputs.environment == 'production' && '5002' || '6002' }}

            echo "=== Health Check Results ==="
            echo "Gateway API Health (Port $GATEWAY_PORT):"
            curl -f http://localhost:$GATEWAY_PORT/health || echo "Gateway API health check failed"
            echo ""
            echo "Auth Service Health (Port $AUTH_PORT):"
            curl -f http://localhost:$AUTH_PORT/health || echo "Auth Service health check failed"
            echo ""
            echo "Email Service Health (Port $EMAIL_PORT):"
            curl -f http://localhost:$EMAIL_PORT/health || echo "Email Service health check failed"

            # Check logs for any errors
            echo "=== Recent Logs ==="
            docker-compose logs --tail=20 